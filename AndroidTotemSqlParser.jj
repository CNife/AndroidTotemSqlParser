PARSER_BEGIN(AndroidTotemSqlParser)

package generated;

import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import ast.*;

public class AndroidTotemSqlParser {
    public static List<Statement> parse(InputStream input) throws Exception {
        AndroidTotemSqlParser parser = new AndroidTotemSqlParser(input);
        return parser.statements();
    }
}

PARSER_END(AndroidTotemSqlParser)

// 空白字符
SKIP : { " " | "\t" | "\r" | "\n" }

// 关键字
TOKEN : {
      <AS: "AS">
    | <CLASS: "CLASS">
    | <CREATE: "CREATE">
    | <DELETE: "DELETE">
    | <DROP: "DROP">
    | <FROM: "FROM">
    | <INSERT: "INSERT">
    | <INTO: "INTO">
    | <SELECT: "SELECT">
    | <SELECTDEPUTY: "SELECTDEPUTY">
    | <SET: "SET">
    | <UPDATE: "UPDATE">
    | <VALUES: "VALUES">
    | <WHERE: "WHERE">
}

// 数据类型
TOKEN : {
      <TYPE: <INT> | <CHAR> >
    | <#INT: "INT">
    | <#CHAR: "CHAR">
}

// 定界符
TOKEN : {
      <ARROW: "->">
    | <COMMA: ",">
    | <DOT: ".">
    | <SEMICOLON: ";">
    | <LEFT_BRACKET: "(">
    | <RIGHT_BRACKET: ")">
    | <SINGLE_QUOTE: "'">
}

// 二元运算符
TOKEN : {
      <BINARY_OPERATOR: <EQUALS> | <LESS_THAN> | <GREATER_THAN> | <LESS_THAN_OR_EQUALS> | <GREATER_THAN_OR_EQUALS>
                        <ADD> | <MINUS> | <MULTIPLY> | <DIVIDE> >
    | <#EQUALS: "=">
    | <#LESS_THAN: "<">
    | <#GREATER_THAN: ">">
    | <#LESS_THAN_OR_EQUALS: "<=">
    | <#GREATER_THAN_OR_EQUALS: ">=">
    | <#ADD: "+">
    | <#MINUS: "-">
    | <#MULTIPLY: "*">
    | <#DIVIDE: "/">
}

// 标识符和数字
TOKEN : {
      <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    | <INTEGER_LITERAL: <LEADING_DIGIT> (<DIGIT>)*>
    | <#LETTER: ["A"-"Z", "a"-"z"]>
    | <#DIGIT: ["0"-"9"]>
    | <#LEADING_DIGIT: ["1"-"9"]>
}

// 字符串
TOKEN : {
    <STRING: <SINGLE_QUOTE> (~["'"])* <SINGLE_QUOTE> >
}

List<Statement> statements():
{
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}
{
    ( s = statement() { statements.add(s); } )*
    <EOF>
    { return statements; }
}

Statement statement():
{
    Statement s;
}
{
    (
        s = selectStatement()
      | LOOKAHEAD(2) s = createClassStatement()
      | s = createDeputyStatement()
      | s = insertStatement()
      | s = updateStatement()
    )
    <SEMICOLON>
    { return s; }
}

SelectStatement selectStatement():
{
    List<Projection> projectionList;
    String className;
    WhereClause whereClause = null;
}
{
    <SELECT>
    projectionList = projectionList()
    <FROM>
    className = identifier()
    [
        <WHERE>
        whereClause = whereClause()
    ]
    { return new SelectStatement(projectionList, className, whereClause); }
}

List<Projection> projectionList():
{
    List<Projection> projectionList = new ArrayList<Projection>();
    Projection projection;
}
{
    projection = projection()
    { projectionList.add(projection); }
    (
        <COMMA>
        projection = projection()
        { projectionList.add(projection); }
    )*
    { return projectionList; }
}

Projection projection():
{
    Projection projection;
    String name = null;
}
{
    (
      projection = binaryProjection()
    | LOOKAHEAD(2) projection = crossClassProjection()
    | projection = simpleProjection()
    )
    [ <AS> name = identifier() ]
    {
        projection.name = name;
        return projection;
    }
}

BinaryProjection binaryProjection():
{
    BinaryExpression expression;
}
{
    <LEFT_BRACKET>
    expression = binaryExpression()
    <RIGHT_BRACKET>
    { return new BinaryProjection(expression); }
}

BinaryExpression binaryExpression():
{
    SimpleExpression left, right;
    OperatorType operator;
}
{
    left = simpleExpression()
    operator = operator()
    right = simpleExpression()
    { return new BinaryExpression(left, right, operator); }
}

SimpleExpression simpleExpression():
{
    Object value;
    PropertyType type;
}
{
    (
        ( value = identifier() { type = PropertyType.CHAR; } )
      | ( value = integer() { type = PropertyType.INT;} )
      | ( value = string() { type = PropertyType.CHAR; } )
    )
    { return new SimpleExpression(value, type); }
}

int integer():
{
    Token token;
}
{
    token = <INTEGER_LITERAL>
    { return Integer.parseInt(token.image); }
}

OperatorType operator():
{
    Token token;
}
{
    token = <BINARY_OPERATOR>
    { return OperatorType.typeOf(token.image); }
}

CrossClassProjection crossClassProjection():
{
    List<String> classNames = new ArrayList<String>();
    String className;
    String propertyName;
}
{
    className = identifier() { classNames.add(className); }
    ( <ARROW> className = identifier() { classNames.add(className); } )+
    <DOT>
    propertyName = identifier()
    { return new CrossClassProjection(classNames, propertyName); }
}

SimpleProjection simpleProjection():
{
    String name;
}
{
    name = identifier()
    { return new SimpleProjection(name); }
}

WhereClause whereClause():
{
    BinaryExpression expression;
}
{
    expression = binaryExpression()
    { return new WhereClause(expression); }
}

String identifier():
{
    Token token;
}
{
    token = <IDENTIFIER>
    { return token.image; }
}

CreateClassStatement createClassStatement():
{
    String className;
    List<Property> propertyList;
}
{
    <CREATE> <CLASS>
    className = identifier()
    propertyList = propertyList()
    { return new CreateClassStatement(className, propertyList); }
}

List<Property> propertyList():
{
    List<Property> propertyList = new ArrayList<Property>();
    Property property;
}
{
    [
        <LEFT_BRACKET>
        property = property()
        { propertyList.add(property); }
        (
            <COMMA>
            property = property()
            { propertyList.add(property); }
        )*
        <RIGHT_BRACKET>
    ]
    { return propertyList; }
}

Property property():
{
    String name;
    PropertyType type;
}
{
    name = identifier()
    type = propertyType()
    { return new Property(name, type); }
}

PropertyType propertyType():
{
    Token token;
}
{
    token = <TYPE>
    { return PropertyType.typeOf(token.image); }
}

CreateDeputyStatement createDeputyStatement():
{
    String className;
    List<Property> propertyList;
    SelectStatement select;
}
{
    <CREATE> <SELECTDEPUTY>
    className = identifier()
    propertyList = propertyList()
    select = selectStatement()
    { return new CreateDeputyStatement(className, propertyList, select); }
}

InsertStatement insertStatement():
{
    String className;
    List<String> propertyList;
    List<SimpleExpression> valueList;
}
{
    <INSERT> <INTO>
    className = identifier()
    propertyList = identifierList()
    <VALUES>
    valueList = valueList()
    { return new InsertStatement(className, propertyList, valueList); }
}

List<String> identifierList():
{
    List<String> identifierList = new ArrayList<String>();
    String identifier;
}
{
    [
        <LEFT_BRACKET>
        identifier = identifier() { identifierList.add(identifier); }
        (
            <COMMA>
            identifier = identifier() { identifierList.add(identifier); }
        )*
        <RIGHT_BRACKET>
    ]
    { return identifierList; }
}

List<SimpleExpression> valueList():
{
    List<SimpleExpression> valueList = new ArrayList<SimpleExpression>();
    SimpleExpression value;
}
{
    [
        <LEFT_BRACKET>
        value = simpleExpression() { valueList.add(value); }
        (
            <COMMA>
            value = simpleExpression() { valueList.add(value); }
        )*
        <RIGHT_BRACKET>
    ]
    { return valueList; }
}

String string():
{
    Token token;
}
{
    token = <STRING>
    {
        String image = token.image;
        return image.substring(1, image.length() - 1);
    }
}

UpdateStatement updateStatement():
{
    String className;
    String propertyName;
    SimpleExpression propertyValue;
    WhereClause whereClause;
    BinaryExpression expression;
}
{
    <UPDATE>
    className = identifier()
    <SET>
    expression = binaryExpression()
    <WHERE>
    whereClause = whereClause()
    {
        propertyName = (String) expression.left.value;
        propertyValue = expression.right;
        return new UpdateStatement(className, propertyName, propertyValue, whereClause);
    }
}